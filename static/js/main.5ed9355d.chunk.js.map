{"version":3,"sources":["../../../../Desktop/compass/src/logo.svg","../../../../Desktop/compass/src/UIComponent/WebCard.js","../../../../Desktop/compass/src/UIComponent/WebCommonCard.js","../../../../Desktop/compass/src/Home/Home.js","../../../../Desktop/compass/src/App.js","../../../../Desktop/compass/src/serviceWorker.js","../../../../Desktop/compass/src/index.js"],"names":["module","exports","__webpack_require__","p","WebCard","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hover","clickUrl","toggleHoverEnter","setState","toggleHoverLeave","web","hasLinkUrl","cn_url","en_url","gb_url","showUI","linkButton","push","react_default","a","createElement","BrowserRouter","Link","key","to","target","onClick","event","preventDefault","window","open","es_button","className","styles","hoverButton","type","url","avatar","hoverCardAvatar","src","hoverTitle","title","divider","hoverDivider","hoverUrlContainer","hoverUI","normalCardAvatar","normalTitle","normalDivider","normalDesc","description","card","hoverable","size","onMouseEnter","onMouseLeave","PureComponent","WebCommonCard","HashRouter","Footer","menu","SubMenu","Header","Sider","Content","Home","allWebsite","allCategory","commonSites","categorySites","isLoading","handleWebSites","all","common","filter","cate","handleCategory","handleClickMenu","_ref","item","keyPath","console","log","scrollToAnchor","anchorName","anchorElement","document","getElementById","scrollIntoView","_this2","fetch","then","response","json","data","catch","error","commonWebsites","commonWebCard","length","map","src_UIComponent_WebCommonCard","menus","Item","name","icon","categoryCards","cateWebsites","currentCateWebs","category","currentCateCard","id","categoryCard","list","grid","gutter","xs","sm","md","lg","xl","xxl","dataSource","renderItem","src_UIComponent_WebCard","layout","sider","theme","width","mode","cotainer","webContainer","commonContainer","style","textAlign","Component","App","src_Home_Home","Boolean","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5ed9355d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {PureComponent} from \"react\";\nimport {\n  Card,\n  Avatar,\n  Button,\n  Divider,\n} from \"antd\";\nimport {BrowserRouter, Route, Link} from \"react-router-dom\";\nimport styles from './WebCard.less';\n\n/*\nweb title: '',\n    url: \"\",                 // 必须：url\n    style: 0,                // 必须：样式\n    category: \"\",            // 必须：分类\n    desc: \"\",                // 必须：描述\n    logo: \"\",                // 必须：logo\n\n    common: false,           // 是否常用\n    recommend: false,        // 是否推荐\n    badge: 0,                // 未读新闻\n    language: [],            // 网站语言\n    popular: 0,              // 欢迎程度，订阅该站点的数目\n */\nclass WebCard extends PureComponent {\n\n  state = {\n    hover: false,\n    clickUrl: false,\n  }\n\n  constructor(props) {\n    super(props);\n\n  }\n\n  componentDidMount() {\n\n  }\n\n  toggleHoverEnter = () => {\n    this.setState({hover: true})\n  }\n\n  toggleHoverLeave = () => {\n    this.setState({hover: false})\n  }\n\n  render() {\n    const web = this.props.web;\n    const hover = this.state.hover;\n    const hasLinkUrl = web.cn_url ? true : ((web.en_url) ? true: ((web.gb_url) ? true : false));\n    // 只有有三个其中之一的外链，以及鼠标在上面时，才显示\n    const showHoverUI = hover && hasLinkUrl;\n\n    const normalUI = function () {\n      return <div>\n        <BrowserRouter>\n        <Link to={web.url} target=\"_blank\" onClick={(event) => {\n          event.preventDefault();\n          window.open(web.url);\n        }}>\n          <Avatar className={styles.normalCardAvatar} src={web.avatar}/>\n          <a className={styles.normalTitle}>{web.title}</a>\n          <Divider className={styles.normalDivider} />\n          <a className={styles.normalDesc}>{web.description}</a>\n        </Link>\n        </BrowserRouter>\n      </div>\n    }\n\n    const hoverUI = function () {\n      const linkButton = [];\n\n      if (web.en_url) {\n        linkButton.push(        <BrowserRouter>\n          <Link key={web.en_url} to={web.en_url} target=\"_blank\" onClick={(event) => {\n          if (hover) {\n            event.preventDefault();\n            window.open(web.en_url);\n          }\n        }}>\n          <Button key={web.en_url} className={styles.hoverButton} type='primary'>英文</Button>\n          </Link></BrowserRouter>)\n      }\n\n      if (web.cn_url) {\n        linkButton.push(        <BrowserRouter>\n          <Link key={web.cn_url} to={web.cn_url} target=\"_blank\" onClick={(event) => {\n            if (hover) {\n              event.preventDefault();\n              window.open(web.cn_url);\n            }\n          }}>\n            <Button key={web.cn_url} className={styles.hoverButton} type='primary'>中文</Button>\n          </Link></BrowserRouter>\n        )\n      }\n\n      if (web.gb_url) {\n        linkButton.push(        <BrowserRouter>\n          <Link key={web.gb_url} to={web.gb_url} target=\"_blank\" onClick={(event) => {\n          if (hover) {\n            event.preventDefault();\n            window.open(web.gb_url);\n          }\n        }}>\n          <Button key={web.gb_url} className={styles.hoverButton} type='primary'>GitHub</Button>\n          </Link></BrowserRouter>)\n      }\n\n      return <div>\n        <BrowserRouter>\n\n        <Link to={web.url} target=\"_blank\" onClick={(event) => {\n          event.preventDefault();\n          window.open(web.url);\n        }}>\n          <Avatar className={styles.hoverCardAvatar} src={web.avatar}/>\n          <a className={styles.hoverTitle}>{web.title}</a>\n          {/*<a className={styles.desc}>{web.description}</a>*/}\n          <Divider className={styles.hoverDivider} />\n        </Link>\n        </BrowserRouter>\n        <span className={styles.hoverUrlContainer}>{linkButton}</span>\n      </div>\n    }\n\n    var showUI = showHoverUI ? hoverUI() : normalUI();\n    return (\n      <div className={styles.card}>\n        <Card\n          hoverable\n          size='small'\n          onMouseEnter={this.toggleHoverEnter} onMouseLeave={this.toggleHoverLeave}\n          className={styles.card}\n        >\n          {showUI}\n        </Card>\n      </div>\n    );\n  }\n\n}\n\nexport default WebCard;\n","import React, {PureComponent} from \"react\";\nimport {\n  Card,\n  Avatar,\n} from \"antd\";\nimport styles from \"./WebCommonCard.less\";\nimport {HashRouter, Link} from \"react-router-dom\";\n\n/*\n* 常用访问的站点\n* */\nclass WebCommonCard extends PureComponent {\n  state = {\n    hover: false,\n    clickUrl: false,\n  }\n\n  constructor(props) {\n    super(props);\n\n  }\n\n  render() {\n\n    const web = this.props.web;\n\n    return (\n      <HashRouter >\n        <Link to={web.url} target=\"_blank\" onClick={(event) => {\n          event.preventDefault();\n          window.open(web.url);\n        }}>\n          <Avatar\n            className={styles.avatar}\n            size={60}\n            src={web.avatar}/>\n        </Link>\n      </HashRouter>\n    );\n  }\n}\n\nexport default WebCommonCard;\n","import React, {Component} from 'react';\n\nimport {\n  Button,\n  Card,\n  Icon,\n  Menu,\n  List,\n  Layout,\n  Anchor,\n  Row,\n  Col,\n} from 'antd';\n\n\nimport WebCard from '../UIComponent/WebCard';\nimport WebCommonCard from '../UIComponent/WebCommonCard';\n\nimport styles from './Home.less';\n\nconst webURL = 'https://raw.githubusercontent.com/wenghengcong/iOS-Compass/master/data/websites.json';\nconst catURL = 'https://raw.githubusercontent.com/wenghengcong/iOS-Compass/master/data/category.json';\n\nconst SubMenu = Menu.SubMenu;\nconst {\n  Header, Footer, Sider, Content,\n} = Layout;\n\n\nclass Home extends Component {\n\n  state = {\n    allWebsite: [],     // 所有网站\n    allCategory: [],    // 分类\n    commonSites: [],     // 常用网站\n    categorySites: [],   // 分类网站\n    isLoading: false,\n  }\n\n  componentDidMount() {\n\n    const _this = this;\n    fetch(catURL)\n      .then(response => response.json())\n      .then(function (data) {\n        _this.setState({\n          allCategory: data,\n        });\n        _this.handleCategory(data);\n      })\n      .catch(error =>\n        this.setState({error, isLoading: false})\n      );\n\n    fetch(webURL)\n      .then(response => response.json())\n      .then(function (data) {\n        _this.setState({\n          allWebsite: data,\n        });\n        _this.handleWebSites(data);\n      })\n      .catch(error =>\n        this.setState({error, isLoading: false})\n      );\n  }\n\n  handleWebSites = (allWebsite) => {\n    const all = allWebsite;\n    const common = all.filter((web) => web.common === true);\n    const cate = all.filter((web) => web.common !== true);\n\n    this.setState({\n      commonSites: common,\n      categorySites: cate,\n    });\n  }\n\n  handleCategory = (allCategory) => {\n\n  }\n\n  handleClickMenu = ({item, key, keyPath}) => {\n    console.log('click', item);\n    this.scrollToAnchor(key);\n  }\n\n  scrollToAnchor = (anchorName) => {\n    if (anchorName) {\n      // 找到锚点\n      let anchorElement = document.getElementById(anchorName);\n      // 如果对应id的锚点存在，就跳转到锚点\n      if (anchorElement) {\n        anchorElement.scrollIntoView();\n      }\n    }\n  }\n\n  render() {\n\n    const commonWebsites = this.state.commonSites;\n    const commonWebCard = [];\n\n    if (commonWebsites.length > 0) {\n      commonWebCard.push(\n        commonWebsites.map((item) => {\n          return <WebCommonCard key={item.url} web={item}> </WebCommonCard>\n        })\n      );\n    }\n\n    const menus = [];\n    const allCategory = this.state.allCategory;\n    if (allCategory.length > 0) {\n      menus.push(\n        allCategory.map((item) => {\n          return <Menu.Item key={item.name}>\n            <Icon type={item.icon}/>\n            <span className=\"nav-text\">{item.name}</span>\n          </Menu.Item>\n        })\n      );\n    }\n\n    const categoryCards = [];\n    const cateWebsites = this.state.categorySites;\n    if (cateWebsites.length > 0) {\n      allCategory.map((item) => {\n\n        const currentCateWebs = cateWebsites.filter(web => web.category === item.name);\n        const currentCateCard = <div id={item.name}>\n          <Card\n            title={item.name}\n            className={styles.categoryCard}\n          >\n            <List\n              grid={{\n                gutter: '10px', xs: 1, sm: 2, md: 4, lg: 4, xl: 5, xxl: 6,\n              }}\n              dataSource={currentCateWebs}\n              size='small'\n              renderItem={web => (\n                <List.Item key={web.url}>\n                  <WebCard web={web}> </WebCard>\n                </List.Item>\n              )}\n            />\n          </Card>\n        </div>\n        if (item.name !== '常用') {\n          categoryCards.push(currentCateCard);\n        }\n      });\n    }\n\n    return (\n      <div>\n        <Layout>\n          <Sider className={styles.sider}\n                 theme='dark'\n                 width={150}\n          >\n            <Menu className={styles.menu}\n                  theme=\"dark\"\n                  mode=\"inline\"\n              // defaultSelectedKeys={['4']}\n                  onClick={this.handleClickMenu}\n            >\n              {menus}\n            </Menu>\n          </Sider>\n          <Layout className={styles.cotainer}>\n            {/*<Header>Header</Header>*/}\n            <Content\n              className={styles.webContainer}\n            >\n              <div id='常用' className={styles.commonContainer}>\n                {commonWebCard}\n              </div>\n              {categoryCards}\n            </Content>\n            <Footer style={{textAlign: 'center'}}>\n              Luci Design ©2019 Created by WengHengcong\n            </Footer>\n          </Layout>\n        </Layout>\n\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Home from './Home/Home'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}